def gitub_authorization_token
  username = ENV['USERNAME']
  personal_github_access_token = ENV['FASTLANE_GITHUB_PAT']
  return nil if username.nil? || personal_github_access_token.nil?

  Base64.strict_encode64("#{username}:#{personal_github_access_token}")
end

def apply_version
  flutter_version_manager(
    arguments: '-apply',
    yml: './version.yml',
    pubspec: './pubspec.yaml'
  )
end

def dart_defines
  " --dart-define API_URL=#{ENV['API_URL']}"
end

platform :ios do
  desc 'Sync Development Provisioning Profile'
  lane :sync_dev_profile do
    app_store_connect_api_key
    match(type: 'development')
  end

  desc 'Deploy a new build to TestFlight'
  lane :deploy do
    apply_version
    setup_ci if ENV['CI']
    app_store_connect_api_key
    match(
      readonly: true,
      type: 'appstore',
      git_basic_authorization: gitub_authorization_token,
    )
    sh 'flutter build ipa --release --no-codesign' + dart_defines
    build_app(
      archive_path: './build/ios/archive/Runner.xcarchive',
      project: './ios/Runner.xcodeproj',
      skip_build_archive: true,
      export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      codesigning_identity: 'match AppStore app.jhw.choremanager',
    )
    upload_to_testflight
  end
end

platform :android do
  desc 'Deploy a new build to the Google Play Internal Track'
  lane :deploy do
    apply_version
    sh 'flutter build appbundle --release' + dart_defines
    upload_to_play_store(
      aab: './build/app/outputs/bundle/release/app-release.aab',
      release_status: 'draft',
      track: 'internal',
    )
  end

  desc 'Deploy a new build to Firebase App Distribution'
  lane :beta do
    apply_version
    sh 'flutter build apk --debug' + dart_defines
    firebase_app_distribution(
      app: ENV['FIREBASE_APP_ID'],
      groups: 'testers',
      android_artifact_path: './build/app/outputs/flutter-apk/app-debug.apk',
      service_credentials_file: './firebase-service-account.json',
    )
  end
end
